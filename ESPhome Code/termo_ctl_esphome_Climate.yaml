#
#
#
#
substitutions:
  name: "termo-inox"
  friendlyname: "Termo Inox"

  PinRele1: GPIO22
  PinRele2: GPIO21
  PinRele3: GPIO19

  PinDallas: GPIO4

  PinBtnOnOff: GPIO32
  PinBtnMode: GPIO33  # este botón cambia termostato
  PinBtnTemp: GPIO25

  PinLed_T1: GPIO26
  PinLed_T2: GPIO27
  PinLed_Power: GPIO14

  PinI2C_SDA: GPIO18
  PinI2C_SCL: GPIO23

  PinBuzzer: GPIO15

  static_ip_address: "192.168.0.186"
  gateway_ip_address: "192.168.0.1"
  subnet_mask: "255.255.252.0"

globals:
  - id: power_state
    type: int  # 0=AllOff,1=T1,2=T1+T2,3=Turbo,4=AllOff
    restore_value: yes
    initial_value: '0'
  - id: active_thermo
    type: int  # 1 = Thermo1, 2 = Thermo2
    restore_value: yes
    initial_value: '1'
  - id: target_t1
    type: float
    restore_value: yes
    initial_value: '45.0'
  - id: target_t2
    type: float
    restore_value: yes
    initial_value: '50.0'
  - id: temp_min
    type: float
    restore_value: yes
    initial_value: '25.0'
  - id: temp_max
    type: float
    restore_value: yes
    initial_value: '75.0'

esphome:
  name: ${name}
  platform: ESP32
  board: esp32dev

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: !secret wifi_ssid2
      password: !secret wifi_password2
  manual_ip:
    static_ip: ${static_ip_address}
    gateway: ${gateway_ip_address}
    subnet: ${subnet_mask}
  ap:
    ssid: "ESP Fallback AP"
    password: !secret wifi_password

captive_portal:
logger:
api:
  encryption:
    key: "XXXXXXXXXXXXX"
ota:
  password: !secret ota_password
mqtt:
  broker: 192.168.0.200
  username: !secret usermqtt
  password: !secret passmqtt

i2c:
  sda: ${PinI2C_SDA}
  scl: ${PinI2C_SCL}
  scan: true

one_wire:
  - platform: gpio
    pin:
      number: ${PinDallas}

output:
  - platform: gpio
    pin: ${PinRele1}
    id: rele1
    inverted: false
  - platform: gpio
    pin: ${PinRele2}
    id: rele2
    inverted: false
  - platform: gpio
    pin: ${PinRele3}
    id: rele3
    inverted: false
  - platform: gpio
    pin: ${PinBuzzer}
    id: buzzer
    inverted: false
  - platform: gpio
    pin: ${PinLed_T1}
    id: led_t1
    inverted: false
  - platform: gpio
    pin: ${PinLed_T2}
    id: led_t2
    inverted: false
  - platform: gpio
    pin: ${PinLed_Power}
    id: led_power
    inverted: false

sensor:
  - platform: dallas_temp
    address: 0x0F3C01B55693B228
    name: "${friendlyname} - Temp1"
    id: temp1
    unit_of_measurement: "°C"
    update_interval: 5s
  - platform: dallas_temp
    address: 0xE63C01D075A77528
    name: "${friendlyname} - Temp2"
    id: temp2
    unit_of_measurement: "°C"
    update_interval: 5s
  - platform: wifi_signal
    name: "${friendlyname} - WiFi"
    id: wifi_signal
    update_interval: 60s

binary_sensor:
  - platform: gpio
    pin: ${PinBtnOnOff}
    name: "${friendlyname} - Botón ON/OFF"
    on_press:
      then:
        - lambda: |-
            id(power_state) = (id(power_state) + 1) % 4;
  - platform: gpio
    pin: ${PinBtnMode}
    name: "${friendlyname} - Botón Modo"
    on_press:
      then:
        - lambda: |-
            id(active_thermo) = (id(active_thermo) == 1) ? 2 : 1;
  - platform: gpio
    pin: ${PinBtnTemp}
    name: "${friendlyname} - Botón Temp"
    on_press:
      then:
        - lambda: |-
            if (id(active_thermo) == 1) {
              id(target_t1) += 5.0;
              if (id(target_t1) > id(temp_max)) id(target_t1) = id(temp_min);
            } else {
              id(target_t2) += 5.0;
              if (id(target_t2) > id(temp_max)) id(target_t2) = id(temp_min);
            }

interval:
  - interval: 5s
    then:
      - lambda: |-
          // Gestor de relés según power_state
          switch (id(power_state)) {
            case 0:
              id(rele1).turn_off(); id(rele2).turn_off(); id(rele3).turn_off();
              break;
            case 1:
              id(rele1).turn_on(); id(rele2).turn_off(); id(rele3).turn_off();
              break;
            case 2:
              id(rele1).turn_on(); id(rele2).turn_on(); id(rele3).turn_off();
              break;
            case 3:
              id(rele1).turn_on(); id(rele2).turn_on(); id(rele3).turn_on();
              break;
          }
          // Actualizar LEDs
          id(led_t1).turn_on(id(power_state == 1 || id(power_state) >=2));
          id(led_t2).turn_on(id(power_state >=2));
          id(led_power).turn_on(id(power_state >=2));
          // Lógica CloudBoost o buzzer se puede agregar aquí

climate:
  - platform: thermostat
    name: "${friendlyname} T1"
    id: thermo1
    sensor: temp1
    default_target_temperature_low: !lambda 'return id(temp_min);'
    default_target_temperature_high: !lambda 'return id(temp_max);'
    heat_action:
      # Siempre activa rele1
      - switch.turn_on: rele1
      # Si estamos en modo Turbo, activa también rele3
      - lambda: |-
          if (id(power_state) == 3)
            id(rele3).turn_on();
    idle_action:
      - switch.turn_off: rele1
      - switch.turn_off: rele3

  - platform: thermostat
    name: "${friendlyname} T2"
    id: thermo2
    sensor: temp2
    default_target_temperature_low: !lambda 'return id(temp_min);'
    default_target_temperature_high: !lambda 'return id(temp_max);'
    heat_action:
      - switch.turn_on: rele2
    idle_action:
      - switch.turn_off: rele2

font:
  - file: "fonts/OpenSans-Regular.ttf"
    id: font1
    size: 20

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    update_interval: 2s
    lambda: |-
      char buf[20];
      float actual = (id(active_thermo)==1)? id(temp1).state : id(temp2).state;
      float target = (id(active_thermo)==1)? id(target_t1) : id(target_t2);
      snprintf(buf, sizeof(buf), "T%u:%.1f/%.0fC", id(active_thermo), actual, target);
      it.print(0,0,id(font1),buf);
      int signal = id(wifi_signal).state;
      if (signal > -60) it.print(100,0,id(font1),"📶");
      else if (signal > -70) it.print(100,0,id(font1),"📶.");
      else it.print(100,0,id(font1),"📶..");
